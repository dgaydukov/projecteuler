/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

 */

/**
 * https://math.stackexchange.com/questions/2487523/how-to-find-the-number-of-divisors-of-a-given-number
 * There is a quicker solution, to calculate primes and then calculate divisors
 * a1^x1 * a2^x2 * ... an^xn, where a1-an - primes, divisors = (a1+1)*(a2+1)*...(an+1)
 * But in the end, overall number of operation, not much more than this brute force cause
 * 1. we need to find all primes from 1 to n (our number)
 * 2. find the largest prime divisors
 * 3. divide until we got to 2
 */

#include <iostream>
#include <ctime>
#include <math.h>

int getDivisorNum(int n)
{
    int num = 1;
    for (int i = 1; i < sqrt(n); i++)
    {
        if (n % i == 0)
        {
            num += 2;
        }
    }
    return num;
}

long run(int n)
{
    int i = 1, triangle, prev = 0;
    while (true)
    {
        triangle = prev + i;
        int divisors = getDivisorNum(triangle);
        if (divisors >= n)
        {
            return triangle;
        }
        prev = triangle;
        i++;
    }
}

int main()
{
    std::clock_t begin = std::clock();
    long result = run(500);
    std::cout << "Result: " << result << std::endl;
    std::clock_t end = std::clock();
    std::cout << "Time taken: " << (end - begin) / CLOCKS_PER_SEC << std::endl;
    return 0;
}